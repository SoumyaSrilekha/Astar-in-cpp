#include <algorithm>  // for sort
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using std::cout;
using std::ifstream;
using std::istringstream;
using std::sort;
using std::string;
using std::vector;
using std::abs;

enum class State {kEmpty, kObstacle, kClosed, kPath};

vector<State> ParseLine(string line) {
    istringstream sline(line);
    int n;
    char c;
    vector<State> row;
    while (sline >> n >> c && c == ',') {
      if (n == 0) {
        row.push_back(State::kEmpty);
      } else {
        row.push_back(State::kObstacle);
      }
    }
    return row;
}


vector<vector<State>> ReadBoardFile(string path) {
  ifstream myfile (path);
  vector<vector<State>> board{};
  if (myfile) {
    string line;
    while (getline(myfile, line)) {
      vector<State> row = ParseLine(line);
      board.push_back(row);
    }
  }
  return board;
}
//Step 5
// TODO: Write function to compare the f-value of two nodes here

bool Compare(vector<int> neighbournode1, vector<int> neighbournode2)
{
  int f1 = neighbournode1[2] + neighbournode1[3];
  int f2 = neighbournode2[2] + neighbournode2[3];
  if( f1 > f2)
  {
    return true;
  }
  else
    return false;
// Step 6
void CellSort(vector<vector<int>> *v) {
  sort(v->begin(), v->end(), Compare);
}
}

// Step 2
// TODO: Write the Heuristic function here.
int Heuristic(int x1, int y1, int x2, int y2){
  int d;

  return abs(x2-x1)+abs(y2-y1);
 
  }
  
  //Step 7(haveto re try it on my own)
  /** 
 * Check that a cell is valid: on the grid, not an obstacle, and clear. 
 */
bool CheckValidCell(int x, int y, vector<vector<State>> &grid) {
  bool on_grid_x = (x >= 0 && x < grid.size());
  bool on_grid_y = (y >= 0 && y < grid[0].size());
  if (on_grid_x && on_grid_y)
    return grid[x][y] == State::kEmpty;
  return false;
}


  //Step 3
  // TODO: Write the AddToOpen function here.
  void AddToOpen(int x, int y, int g, int h, vector<vector<int>> &openlist, vector<vector<State>> &grid)
{
  vector <int> node;
  node.push_back(x);
  node.push_back(y);
  node.push_back(g);
  node.push_back(h);
  openlist.push_back(node);
  grid[x][y]= State::kClosed;
  
}
// Step 1
// TODO: Write the Search function stub here.
std::vector<vector<State>> Search( auto grid, int init[2], int goal[2])
{
  //Step 4
  // Create the vector of open nodes.
  vector<vector<int>> open {};
  
  // TODO: Initialize the starting node. 
  int x = init[0];
  int y = init[1];
  int g = 0;
  int h = Heurestic(x,y,goal[0],goal[1]);
  // TODO: Use AddToOpen to add the starting node to the open vector.
  AddToOpen(x, y, g, h, open, grid);
    //Step 6
    // TODO: while open vector is non empty {
  while(!open.empty())
  {
    // TODO: Sort the open list using CellSort, and get the current node.
    CellSort(&open);
    vector <int> current_node = open.back();
	open.pop_back();
    // TODO: Get the x and y values from the current node,
    int cx = current_node[0];
    int cy = current_node[1];
    // and set grid[x][y] to kPath.
	grid[cx][cy] = State::kPath;
    // TODO: Check if you've reached the goal. If so, return grid.
	if(cx == goal[0] && cy == goal[1])
    {
      return grid;
    }
    
    
    // If we're not done, expand search to current node's neighbors. This step will be completed in a later quiz.
    // ExpandNeighbors
  
  //} // TODO: End while loop
  }

  std::cout<<"No path found \n" ;
    return std::vector<vector<State>> {};
}

string CellString(State cell) {
  switch(cell) {
    case State::kObstacle: return "⛰️   ";
    default: return "0   "; 
  }
}


void PrintBoard(const vector<vector<State>> board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[i].size(); j++) {
      cout << CellString(board[i][j]);
    }
    cout << "\n";
  }
}

int main() {
  int init[2]{0, 0};
  int goal[2]{4, 5};
  auto board = ReadBoardFile("1.board");
  auto solution = Search(board, init, goal);
  PrintBoard(solution);
  // Tests
  TestHeuristic();
  TestAddToOpen();
  TestCompare();
  TestSearch();
}
  
  // Step 1
  auto board = ReadBoardFile("1.board");
  // TODO: Call Search with "board", "init", and "goal". Store the results in the variable "solution".
  std::vector<vector<State>> solution = Search(board, init, goal);
  // TODO: Change the following line to pass "solution" to PrintBoard.
  PrintBoard(solution);
  TestHeuristic();
  TestAddToOpen();
}
